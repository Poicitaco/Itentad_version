package QuanLyKyThi;

// Th√™m import cho callback interface
import java.util.function.Consumer;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 * Form ƒëƒÉng nh·∫≠p h·ªá th·ªëng
 */
public class LoginForm extends JFrame {
    private JTextField txtUsername;
    private JPasswordField txtPassword;
    private JButton btnLogin, btnExit;
    private JLabel lblStatus;
    private AuthenticationService authService;
    
    // Callback ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ ƒëƒÉng nh·∫≠p
    private Consumer<AuthenticationService> loginSuccessCallback;
    private Runnable loginCancelCallback;
    
    public LoginForm() {
        this.authService = new AuthenticationService();
        initComponents();
    }
    
    // Constructor v·ªõi callback
    public LoginForm(Consumer<AuthenticationService> onLoginSuccess, Runnable onLoginCancel) {
        this();
        this.loginSuccessCallback = onLoginSuccess;
        this.loginCancelCallback = onLoginCancel;
    }
    
    private void initComponents() {
        setTitle("üîê ƒêƒÉng Nh·∫≠p - H·ªá Th·ªëng Qu·∫£n L√Ω K·ª≥ Thi");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600); // TƒÉng k√≠ch th∆∞·ªõc c·ª≠a s·ªï
        setLocationRelativeTo(null);
        setResizable(false);
        
        // Panel ch√≠nh v·ªõi gradient background
        JPanel mainPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                int w = getWidth(), h = getHeight();
                Color color1 = new Color(0, 102, 204);
                Color color2 = new Color(102, 178, 255);
                GradientPaint gp = new GradientPaint(0, 0, color1, 0, h, color2);
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, w, h);
            }
        };
        mainPanel.setLayout(new GridBagLayout());
        
        // Panel form ƒëƒÉng nh·∫≠p
        JPanel loginPanel = new JPanel(new GridBagLayout());
        loginPanel.setBackground(Color.WHITE);
        loginPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createRaisedBevelBorder(),
            BorderFactory.createEmptyBorder(30, 30, 30, 30)
        ));
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        
        // Logo/Title
        JLabel titleLabel = new JLabel("ƒêƒÇNG NH·∫¨P H·ªÜ TH·ªêNG");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        titleLabel.setForeground(new Color(0, 102, 204));
        gbc.gridx = 0; gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        loginPanel.add(titleLabel, gbc);
        
        // Icon
        try {
            JLabel iconLabel = new JLabel("üîê");
            iconLabel.setFont(new Font("Arial", Font.PLAIN, 48));
            gbc.gridy = 1;
            loginPanel.add(iconLabel, gbc);
        } catch (Exception e) {
            // N·∫øu kh√¥ng c√≥ icon th√¨ b·ªè qua
        }
        
        // Reset gridwidth
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.WEST;
        
        // Username
        gbc.gridx = 0; gbc.gridy = 2;
        JLabel lblUsername = new JLabel("T√™n ƒëƒÉng nh·∫≠p:");
        lblUsername.setFont(new Font("Arial", Font.BOLD, 14));
        loginPanel.add(lblUsername, gbc);
        
        gbc.gridx = 1;
        txtUsername = new JTextField(20); // TƒÉng t·ª´ 15 l√™n 20
        txtUsername.setFont(new Font("Arial", Font.PLAIN, 14)); // TƒÉng font size
        txtUsername.setPreferredSize(new Dimension(200, 35)); // Thi·∫øt l·∫≠p size c·ªë ƒë·ªãnh
        txtUsername.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLoweredBevelBorder(),
            BorderFactory.createEmptyBorder(8, 8, 8, 8) // TƒÉng padding
        ));
        loginPanel.add(txtUsername, gbc);
        
        // Password
        gbc.gridx = 0; gbc.gridy = 3;
        JLabel lblPassword = new JLabel("M·∫≠t kh·∫©u:");
        lblPassword.setFont(new Font("Arial", Font.BOLD, 14)); // TƒÉng font size
        loginPanel.add(lblPassword, gbc);
        
        gbc.gridx = 1;
        txtPassword = new JPasswordField(20); // TƒÉng t·ª´ 15 l√™n 20
        txtPassword.setFont(new Font("Arial", Font.PLAIN, 14)); // TƒÉng font size
        txtPassword.setPreferredSize(new Dimension(200, 35)); // Thi·∫øt l·∫≠p size c·ªë ƒë·ªãnh
        txtPassword.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLoweredBevelBorder(),
            BorderFactory.createEmptyBorder(8, 8, 8, 8) // TƒÉng padding
        ));
        loginPanel.add(txtPassword, gbc);
        
        // Status label
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        lblStatus = new JLabel(" ");
        lblStatus.setFont(new Font("Arial", Font.ITALIC, 12)); // TƒÉng font size
        lblStatus.setForeground(Color.RED);
        lblStatus.setPreferredSize(new Dimension(300, 25)); // Thi·∫øt l·∫≠p height c·ªë ƒë·ªãnh
        loginPanel.add(lblStatus, gbc);
        
        // Buttons
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 10, 10); // Th√™m margin
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 5)); // TƒÉng kho·∫£ng c√°ch gi·ªØa buttons
        buttonPanel.setOpaque(false);
        
        btnLogin = new JButton("ƒêƒÇNG NH·∫¨P");
        btnLogin.setBackground(new Color(0, 153, 0));
        btnLogin.setForeground(Color.BLACK); // Thay ƒë·ªïi th√†nh m√†u ƒëen  
        btnLogin.setFont(new Font("Arial", Font.BOLD, 14)); // TƒÉng font size
        btnLogin.setFocusPainted(false);
        btnLogin.setPreferredSize(new Dimension(130, 40)); // TƒÉng k√≠ch th∆∞·ªõc button
        btnLogin.setBorder(BorderFactory.createRaisedBevelBorder()); // Th√™m border r√µ r√†ng
        
        btnExit = new JButton("THO√ÅT");
        btnExit.setBackground(new Color(204, 0, 0));
        btnExit.setForeground(Color.BLACK); // Thay ƒë·ªïi th√†nh m√†u ƒëen
        btnExit.setFont(new Font("Arial", Font.BOLD, 14)); // TƒÉng font size
        btnExit.setFocusPainted(false);
        btnExit.setPreferredSize(new Dimension(130, 40)); // TƒÉng k√≠ch th∆∞·ªõc button
        btnExit.setBorder(BorderFactory.createRaisedBevelBorder()); // Th√™m border r√µ r√†ng
        
        buttonPanel.add(btnLogin);
        buttonPanel.add(btnExit);
        loginPanel.add(buttonPanel, gbc);
        
        // Th√™m v√†o main panel
        mainPanel.add(loginPanel);
        add(mainPanel);
        
        // Debug: In ra th√¥ng tin v·ªÅ size v√† layout
        System.out.println("LoginForm - MainPanel size: " + mainPanel.getPreferredSize());
        System.out.println("LoginForm - LoginPanel size: " + loginPanel.getPreferredSize());
        System.out.println("LoginForm - Components count: " + loginPanel.getComponentCount());
    
        // Event handlers
        setupEventHandlers();
        
        // Force repaint v√† validate
        validate();
        repaint();
        
        // Focus v√†o username
        SwingUtilities.invokeLater(() -> {
            txtUsername.requestFocus();
            // Debug: Ki·ªÉm tra visibility
            System.out.println("LoginForm - Frame visible: " + isVisible());
            System.out.println("LoginForm - Frame size: " + getSize());
            System.out.println("LoginForm - Components visible: " + loginPanel.isVisible());
        });
    }
    
    private void setupEventHandlers() {
        btnLogin.addActionListener(e -> performLogin());
        btnExit.addActionListener(e -> System.exit(0));
        
        // Enter ƒë·ªÉ ƒëƒÉng nh·∫≠p
        KeyListener enterKeyListener = new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    performLogin();
                }
            }
            
            @Override
            public void keyTyped(KeyEvent e) {}
            
            @Override
            public void keyReleased(KeyEvent e) {}
        };
        
        txtUsername.addKeyListener(enterKeyListener);
        txtPassword.addKeyListener(enterKeyListener);
        
        // Tab ƒë·ªÉ chuy·ªÉn focus
        txtUsername.addActionListener(e -> txtPassword.requestFocus());
        
        // Th√™m hi·ªáu ·ª©ng hover cho buttons
        addButtonHoverEffects();
    }
    
    private void addButtonHoverEffects() {
        // Hi·ªáu ·ª©ng hover cho button ƒêƒÉng nh·∫≠p
        btnLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLogin.setBackground(new Color(0, 180, 0)); // Xanh s√°ng h∆°n
                btnLogin.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLogin.setBackground(new Color(0, 153, 0)); // Xanh ban ƒë·∫ßu
                btnLogin.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
            
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnLogin.setBackground(new Color(0, 120, 0)); // Xanh ƒë·∫≠m khi nh·∫•n
            }
            
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnLogin.setBackground(new Color(0, 180, 0)); // Quay l·∫°i m√†u hover
            }
        });
        
        // Hi·ªáu ·ª©ng hover cho button Tho√°t
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnExit.setBackground(new Color(230, 0, 0)); // ƒê·ªè s√°ng h∆°n
                btnExit.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExit.setBackground(new Color(204, 0, 0)); // ƒê·ªè ban ƒë·∫ßu
                btnExit.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
            
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnExit.setBackground(new Color(180, 0, 0)); // ƒê·ªè ƒë·∫≠m khi nh·∫•n
            }
            
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnExit.setBackground(new Color(230, 0, 0)); // Quay l·∫°i m√†u hover
            }
        });
    }
    
    private void performLogin() {
        String username = txtUsername.getText().trim();
        String password = new String(txtPassword.getPassword());
        
        if (username.isEmpty()) {
            showStatus("Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!", Color.RED);
            txtUsername.requestFocus();
            return;
        }
        
        if (password.isEmpty()) {
            showStatus("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!", Color.RED);
            txtPassword.requestFocus();
            return;
        }
        
        // Hi·ªÉn th·ªã loading
        btnLogin.setEnabled(false);
        btnLogin.setText("ƒêang ƒëƒÉng nh·∫≠p...");
        showStatus("ƒêang x√°c th·ª±c...", Color.BLUE);
        
        // Simulate loading delay
        Timer timer = new Timer(1000, e -> {
            if (authService.login(username, password)) {
                showStatus("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", Color.GREEN);
                
                // L·∫•y th√¥ng tin user hi·ªán t·∫°i
                User currentUser = authService.getCurrentUser();
                System.out.println("LoginForm - ƒêƒÉng nh·∫≠p th√†nh c√¥ng: " + currentUser.getHoTen() + " (" + currentUser.getRole() + ")");
                
                // G·ªçi callback n·∫øu c√≥
                if (loginSuccessCallback != null) {
                    System.out.println("LoginForm - S·ª≠ d·ª•ng callback ƒë·ªÉ m·ªü MainGUIWithAuth");
                    loginSuccessCallback.accept(authService);
                } else {
                    System.out.println("LoginForm - S·ª≠ d·ª•ng logic m·∫∑c ƒë·ªãnh ƒë·ªÉ chuy·ªÉn h∆∞·ªõng");
                    // Chuy·ªÉn h∆∞·ªõng theo role
                    SwingUtilities.invokeLater(() -> {
                        redirectBasedOnRole(currentUser);
                        dispose();
                    });
                }
            } else {
                showStatus("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!", Color.RED);
                txtPassword.setText("");
                txtUsername.requestFocus();
            }
            
            btnLogin.setEnabled(true);
            btnLogin.setText("ƒêƒÉng Nh·∫≠p");
        });
        timer.setRepeats(false);
        timer.start();
    }
    
    private void showStatus(String message, Color color) {
        lblStatus.setText(message);
        lblStatus.setForeground(color);
    }
    
    /**
     * Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn giao di·ªán ph√π h·ª£p v·ªõi role
     */
    private void redirectBasedOnRole(User user) {
        if (user == null) {
            JOptionPane.showMessageDialog(this, "L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th√¥ng tin ng∆∞·ªùi d√πng!", 
                                        "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // N·∫øu c√≥ callback, s·ª≠ d·ª•ng callback thay v√¨ t·ª± m·ªü giao di·ªán
        if (loginSuccessCallback != null) {
            loginSuccessCallback.accept(authService);
            return;
        }
        
        // Logic m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ callback
        String role = user.getRole().toLowerCase();
        String welcomeMessage = "Ch√†o m·ª´ng " + user.getHoTen() + " (" + user.getRole() + ")";
        
        switch (role) {
            case "admin":
                // Admin: C√≥ quy·ªÅn cao nh·∫•t, v√†o MainGUIWithAuth
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p v·ªõi quy·ªÅn Qu·∫£n tr·ªã vi√™n", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                new MainGUIWithAuth(authService);
                break;
                
            case "giaovu":
                // Gi√°o v·ª•: Qu·∫£n l√Ω k·ª≥ thi, nh·∫≠p ƒëi·ªÉm, th·ªëng k√™
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p v·ªõi quy·ªÅn Gi√°o v·ª•", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                new MainGUIWithAuth(authService);
                break;
                
            case "user":
                // User th∆∞·ªùng: Ch·ªâ xem k·∫øt qu·∫£, ƒëƒÉng k√Ω thi
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p v·ªõi quy·ªÅn h·∫°n ch·∫ø", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                openUserLimitedGUI(user);
                break;
                
            case "thisinh":
                // Th√≠ sinh: Ch·ªâ xem k·∫øt qu·∫£ c·ªßa m√¨nh
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p d√†nh cho Th√≠ sinh", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                openThiSinhGUI(user);
                break;
                
            default:
                // Role kh√¥ng x√°c ƒë·ªãnh: V√†o demo mode ho·∫∑c basic GUI
                JOptionPane.showMessageDialog(null, welcomeMessage + "\nTruy c·∫≠p v·ªõi quy·ªÅn c∆° b·∫£n", 
                                            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                openDemoMode();
                break;
        }
    }
    
    /**
     * M·ªü giao di·ªán h·∫°n ch·∫ø cho user th∆∞·ªùng
     */
    private void openUserLimitedGUI(User user) {
        // C√≥ th·ªÉ t·∫°o UserLimitedGUI ho·∫∑c d√πng MainGUI v·ªõi m·ªôt s·ªë t√≠nh nƒÉng b·ªã ·∫©n
        try {
            // T·∫°m th·ªùi d√πng MainGUI, sau n√†y c√≥ th·ªÉ t·∫°o GUI ri√™ng
            new MainGUI();  // Kh√¥ng c√≥ quy·ªÅn admin
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói kh·ªüi t·∫°o giao di·ªán: " + e.getMessage(), 
                                        "L·ªói", JOptionPane.ERROR_MESSAGE);
            openDemoMode();
        }
    }
    
    /**
     * M·ªü giao di·ªán d√†nh cho th√≠ sinh
     */
    private void openThiSinhGUI(User user) {
        try {
            // C√≥ th·ªÉ t·∫°o ThiSinhGUI ri√™ng, hi·ªán t·∫°i d√πng MainGUI
            new MainGUI();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói kh·ªüi t·∫°o giao di·ªán: " + e.getMessage(), 
                                        "L·ªói", JOptionPane.ERROR_MESSAGE);
            openDemoMode();
        }
    }
    
    /**
     * M·ªü Demo mode khi c√≥ l·ªói ho·∫∑c role kh√¥ng x√°c ƒë·ªãnh
     */
    private void openDemoMode() {
        try {
            // M·ªü MainGUI v·ªõi quy·ªÅn demo
            SwingUtilities.invokeLater(() -> {
                try {
                    // T·∫°o MainGUI v·ªõi quy·ªÅn basic
                    new MainGUI();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ m·ªü ch·∫ø ƒë·ªô demo: " + ex.getMessage());
                }
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ kh·ªüi t·∫°o b·∫•t k·ª≥ giao di·ªán n√†o!", 
                                        "L·ªói h·ªá th·ªëng", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    /**
     * Entry point ri√™ng cho LoginForm - ƒêi·ªÉm kh·ªüi ch·∫°y c√≥ authentication
     * 
     * Workflow sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng:
     * - Admin: ‚Üí MainGUIWithAuth (quy·ªÅn ƒë·∫ßy ƒë·ªß)
     * - Gi√°o v·ª•: ‚Üí MainGUIWithAuth (qu·∫£n l√Ω k·ª≥ thi, nh·∫≠p ƒëi·ªÉm)
     * - User: ‚Üí MainGUI (quy·ªÅn h·∫°n ch·∫ø)
     * - Th√≠ sinh: ‚Üí MainGUI (ch·ªâ xem k·∫øt qu·∫£)
     * - Kh√°c: ‚Üí Demo mode (fallback)
     * 
     * Entry point ch√≠nh kh√¥ng c√≥ auth: Demo.main()
     */
    public static void main(String[] args) {
        // Set Look and Feel ƒë·ªÉ giao di·ªán ƒë·∫πp h∆°n
        try {
            // S·ª≠ d·ª•ng Look and Feel c·ªßa h·ªá ƒëi·ªÅu h√†nh (Windows/Mac/Linux)
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | 
                 IllegalAccessException | UnsupportedLookAndFeelException e) {
            // N·∫øu l·ªói th√¨ d√πng Look and Feel m·∫∑c ƒë·ªãnh (Metal)
            System.err.println("Kh√¥ng th·ªÉ thi·∫øt l·∫≠p System Look and Feel: " + e.getMessage());
            try {
                UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        
        // Kh·ªüi ch·∫°y ·ª©ng d·ª•ng tr√™n Event Dispatch Thread
        SwingUtilities.invokeLater(() -> {
            new LoginForm().setVisible(true);
        });
    }
}
